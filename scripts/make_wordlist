#!/usr/bin/python3
#
# Copyright (c) 2020 Jeff Doozan
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
This will build a dictionary from an english wiktionary dump
"""

import os
import re
import sys

os.environ["PYWIKIBOT_NO_USER_CONFIG"]="2"
from pywikibot import xmlreader

from enwiktionary_parser.languages.all_ids import languages as lang_ids

from enwiktionary_wordlist.language_extract import LanguageFile
from enwiktionary_wordlist.wordlist import Wordlist
from enwiktionary_wordlist.wordlist_builder import WordlistBuilder

def iter_langdata(datafile):

    if not os.path.isfile(datafile):
        raise FileNotFoundError(f"Cannot open: {datafile}")

    yield from LanguageFile.iter_articles(datafile)

def iter_xml(datafile, lang_section):

    if not os.path.isfile(datafile):
        raise FileNotFoundError(f"Cannot open: {datafile}")

    dump = xmlreader.XmlDump(datafile)
    parser = dump.parse()

    langparser = LanguageFile(lang_section)

    for entry in parser:

        if ":" in entry.title or "/" in entry.title:
            continue

        lang_entry = langparser.get_language_entry(entry.text)

        if not lang_entry:
            continue

        yield entry.title, lang_entry

def main():
    import argparse

    parser = argparse.ArgumentParser(description="Convert *nym sections to tags.")
    parser.add_argument("--xml", help="Read entries from specified wiktionary XML dump")
    parser.add_argument("--langdata", help="Read articles from specified language data file")
    parser.add_argument("--wordlist", help="Read articles from existing wordlist")
    parser.add_argument("--lang-id", help="Language id")
    parser.add_argument("--limit", help="Limit to n entries", type=int, default=0)
    parser.add_argument('--verbose', action='store_true')
    parser.add_argument('--exclude-verb-forms', action='store_true', help="Exclude all verb forms")
    parser.add_argument('--exclude-generated-forms', action='store_true', help="Exclude forms entries that can be generate automatically")
    args = parser.parse_args()

    count = 0
    entries = {}

    if args.langdata or args.xml:
        if not args.lang_id:
            raise ValueError("--lang-id is required when using --xml or --langdata")

        elif args.lang_id not in lang_ids:
            raise ValueError(f"Unknown language id: {args.lang_id}")

        lang_section = lang_ids[args.lang_id]
        builder = WordlistBuilder(lang_section, args.lang_id)

        if args.langdata:
            iter_entry = iter_langdata(args.langdata)
        else:
            iter_entry = iter_xml(args.xml, lang_section)

        def _iter_entries():
            for title, entry in iter_entry:
                entry = builder.entry_to_text(entry, title)
                if not entry:
                    continue
                yield title, entry

        iter_entries = _iter_entries()

    elif args.wordlist:
        infile = open(args.wordlist)
        iter_entries = Wordlist._iter_entries(infile)

    else:
        raise ValueError("No input file specified, use --xml or --lang-data or --wordlist")

    # Build a Wordlist manually so later it can be used to validate entries
    wordlist = Wordlist()
    count = 0
    for title, entry in iter_entries:
        count += 1
        if count % 1000 == 0 and args.verbose:
            print(count, file=sys.stderr, end="\r")
        if args.limit and count >= args.limit:
            break
        wordlist.all_entries[title] = map(str.lstrip, entry)


    for line in WordlistBuilder.from_wordlist(wordlist, exclude_generated=args.exclude_generated_forms):
        print(line)

    print(count, "entries processed", file=sys.stderr)

if __name__ == "__main__":
    main()

