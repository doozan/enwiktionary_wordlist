#!/usr/bin/python3
#
# Copyright (c) 2020 Jeff Doozan
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
Extract all articles with the specified language
"""

import bz2
import os
import re
import sys

from collections import defaultdict
from enwiktionary_parser.languages.all_ids import ALL_LANG_IDS
from enwiktionary_wordlist.utils import make_language_pattern
from pywikibot import xmlreader

def main():

    import argparse

    argparser = argparse.ArgumentParser(description="Extract language sections from enwiktionary dump")
    argparser.add_argument("--xml", help="XML file to load", required=True)
    argparser.add_argument("--lang", action="append", help="Language to dump, can be specified multiple times", required=True)
    argparser.add_argument("--templates", help="Dump the entire Templates: namespace", action='store_true')
    argparser.add_argument("--modules", help="Dump the entire Modules: namespace", action='store_true')
    argparser.add_argument("--redirects", help="Dump all redirects", action='store_true')
    argparser.add_argument("--allpages", help="Dump list of all pages" ,action='store_true')
    argparser.add_argument("--outdir", help="Path to save extracted languages", default=".")
    argparser.add_argument("--limit", type=int, help="Limit processing to first N articles")
    argparser.add_argument('--verbose', action='store_true')

    args = argparser.parse_args()

    if not os.path.isfile(args.xml):
        raise FileNotFoundError(f"Cannot open: {args.xml}")

    lang_count = defaultdict(int)

    file_handles = {}
    pattern = {}

    lang_sections = []
    for lang_id in args.lang:
        if lang_id == "all":
            lang_name = "all"
        else:
            lang_name = ALL_LANG_IDS.get(lang_id)
            if not lang_name:
                raise ValueError(f"Unknown language id: {lang_id}")
            lang_sections.append(lang_name)

        filename = f"{lang_id}-en.enwikt.txt.bz2"
        outfile = os.path.join(args.outdir, filename)
        file_handles[lang_name] = bz2.open(outfile, "wt")

    if args.templates:
        filename = f"templates.enwikt.txt.bz2"
        outfile = os.path.join(args.outdir, filename)
        file_handles["templates"] = bz2.open(outfile, "wt")

    if args.modules:
        filename = f"modules.enwikt.txt.bz2"
        outfile = os.path.join(args.outdir, filename)
        file_handles["modules"] = bz2.open(outfile, "wt")

    if args.redirects:
        filename = f"redirects.enwikt.txt.bz2"
        outfile = os.path.join(args.outdir, filename)
        file_handles["redirects"] = bz2.open(outfile, "wt")

    if args.allpages:
        filename = f"enwikt.pages"
        outfile = os.path.join(args.outdir, filename)
        file_handles["allpages"] = open(outfile, "wt")

    match_pattern = make_language_pattern(lang_sections) if lang_sections else None

    dump = xmlreader.XmlDump(args.xml)
    parser = dump.parse()

    count = 0

    for entry in parser:
        if not count % 1000 and args.verbose:
            print(count, end = '\r', file=sys.stderr)

        if args.limit and count >= args.limit:
            break
        count += 1

        if args.allpages:
            lang_name = "allpages"
            print(entry.title, file=file_handles[lang_name])

        if entry.isredirect:
            if args.redirects:
                lang_name = "redirects"
                lang_count[lang_name] += 1
                file_handles[lang_name].write(f"_____{entry.title}:@{entry.revisionid}_____\n{entry.text}\n")
            continue

        if args.templates and entry.title.startswith("Template:"):
            lang_name = "templates"
            lang_count[lang_name] += 1
            file_handles[lang_name].write(f"_____{entry.title}:@{entry.revisionid}_____\n{entry.text}\n")

        elif args.templates and entry.title.startswith("Module:"):
            lang_name = "modules"
            lang_count[lang_name] += 1
            file_handles[lang_name].write(f"_____{entry.title}:@{entry.revisionid}_____\n{entry.text}\n")

        # TODO: split ":" and validate namespace
        if ":" in entry.title or "/" in entry.title:
            continue

        if "all" in args.lang:
            lang_name = "all"
            lang_count[lang_name] += 1
            file_handles[lang_name].write(f"_____{entry.title}:@{entry.revisionid}_____\n{entry.text}\n")

        if not match_pattern:
            continue

        for res in re.finditer(match_pattern, entry.text):
            lang_name = res.group("section_title")
            lang_entry = res.group(0)

            lang_count[lang_name] += 1
            file_handles[lang_name].write(f"_____{entry.title}:@{entry.revisionid}_____\n{lang_entry}\n")

    print(f"Total articles: {count}")
    for lang_name in file_handles:
        file_handles[lang_name].close
        print(f"Total in {lang_name}: {lang_count[lang_name]}")


if __name__ == "__main__":
    main()
